I/O Redirection: KB is a standard Input Device while Screen is a standard Output Device, Whenever you execute a program/command at the terminal, 3 files are always open,
viz., standard input as Exit Code 0, standard output Exit Code 1, standard error Exit Code 2 which are also known as File Descriptors (FD). In Linux/Unix, everything is a file. 
Regular file, Directories, and even Devices are files. Every File has an associated number called File Descriptor (FD). Screen also has a File Descriptor. When a program is 
executed the output is sent to File Descriptor of the screen and program output seen on monitor. If sent to File Descriptor of the printer, the program output is printed.

Output redirection pearator ">"  and Output append operator ">>":  helps redirect the program output to a file rather than online display. e.g. $ echo "myprogram" > "xyz" redirects the ouput to a file xyz and 
$ echo "myprogram" >> "xyz" will enable adding the to the file rather than overwrite the the output of first run. This is frequently used to capture the error for analysis.
Opeartor "2>&1" e.g. we run a command  $ ls document XYZ  and the output is below which means dir "XYZ" exists with a file "abc" while no dir named "document" in the system.
ls: cannot access 'document': No such file or directory
XYZ:
abc
Lets can use "2>&1": $ ls document XYZ > test 2>&1 will redirect the both the output as well as error in the file "test" as shpwn below.
$ cat test
ls: cannot access 'document': No such file or directory
XYZ:
abc

Input redirection operator "<" : Attach a File to email  $ Mail -s "Subject" to-address < Filename  or $ Mail -s "Approval Request" jonny@gmail.com < abc
">&"re-directs output of one file to another.

Pipe operator "|" : The Pipe command helps output of one command serves as input to the next in a way that O/P of each process becomes the I/P to the next one like a pipeline.
Use Cases: 'cat' command to view a large file because prompt quickly jumps to the last page of the file and we do not see the content in the middle.
$ cat filename | less : Pages will only scroll one length of content at a time.
$ cat filename | more

Grep: To search a particular information the postal code from a text file e.g    $ grep "text name" "file name"
$ cat "file name" | grep -i "text name"    e.g. -i	Match both (upper and lower) case, -v	Shows all the lines that do not match the searched string,
-c	Displays only the count of matching lines, -n	Shows the matching line and its number, -i	Match both (upper and lower) case.

Filters: A filter takes input from one command, does some processing, and gives output. Linux has a lot of filter commands like awk, grep, sed, spell, and wc.
e.g. we have a file "test" containing words " dog, mouse, rat, mango, deer" so we can filter based on a character present or absent in the word.
Case 1: filter out all words with char "a" in normal and reverse order (-r Reverses  sorting, -n Sorts numerically, -f Case insensitive sorting) 
$ cat test | grep -v a | sort -f  ( deer dog mouse ) and $ cat test | grep -v a | sort -r ( mouse dog deer )

SED: SED command is a stream editor and it can perform many function on file like, searching, find and replace, insertion or deletion without opening the file in an editor.
Replacing or substituting string: $ sed 's/Word-X/Word-Y/' file-name  (Word-Y replaces only the first occurance of Word-X in every line only without touching the second occurance)
Here the “s” specifies the substitution operation. The “/” are delimiters. The “unix” is the search pattern and the “linux” is the replacement string.
Replacing the nth occurrence of a pattern in a line: $ sed 's/Word-X/Word-Y/2' file-name (The /1, /2 etc flags only replaces the first, second occurrence of a pattern in a line)
Replacing all the occurrence of the pattern in a line : $ sed 's/Word-X/Word-Y/g' file-name
Replacing from nth occurrence to all occurrences in a line : $ sed 's/Word-X/Word-Y/3g' file-name
Parenthesize first character of each word : $ echo "Welcome To Sed" | sed 's/\(\b[A-Z]\)/\(\1\)/g'  ( (W)elcome (T)o (S)ed )
Replacing string on a specific line number : $ sed '5 s/Word-X/Word-Y/' file-name (Replace action only at line no.5)
Duplicating the replaced line with /p flag : $ sed 's/Word-X/Word-Y/p' file-name 
(The /p print flag prints the replaced line twice on the terminal. If a line does not have the search pattern and is not replaced, then the /p prints that line only once.)
Printing only the replaced lines: $ sed -n 's/Word-X/Word-Y/p' file-name  (Use the -n option along with the /p print flag to display only the replaced lines. 
Here the -n option suppresses the duplicate rows generated by the /p flag and prints the replaced lines only one time.)
Replacing string on a range of lines : $ sed '2,5 s/Word-X/Word-Y/' file-name   (specify a range of line numbers to the sed command for replacing a string.)
Deleting lines from a particular file : $ sed 'nd' filename.txt            Example: $ sed '5d' filename.txt
To Delete a last line: $ sed '$d' filename.txt
To Delete line from range x to y: $ sed 'x,yd' filename.txt                Example: $ sed '3,6d' filename.txt
To Delete from nth to last line: $ sed 'nth,$d' filename.txt               Example: $ sed '12,$d' filename.txt
To Delete pattern matching line: $ sed '/pattern/d' filename.txt           Example: $ sed '/abc/d' filename.txt
 
Regular Expressions: ^	matches start of string, $	matches end of string, *	matches up zero or more times the preceding character...
e.g. $ cat test | grep r$  ( deer) and $ cat test | grep ^d  ( dog deer )


Variables:
A variable is a location for storing a value which can be a filename, text, number or any other data. It is usually referred to with its Symbolic name which is given
to it while creation. The value thus stored can be displayed, deleted, edited and re-saved. Variables play an important role in computer programming because they enable 
programmers to write flexible programs. As they are related to the Operating system that we work on, it is important to know some of them and how we can influence them

Envionment Variables: 
Environment variables are dynamic values which affect the processes or programs on a computer. They exist in every operating system, but types may vary.
Environment variables can be created, edited, saved, and deleted and give information about the system behavior.
Environment variables can change the way a software/programs behave.
$ env  (To displays all the environment variables)
$ echo $ " NAME OF THE VARIABLE"  ( to determine value of a variable and Variables are- Case Sensitive Capitals )
e.g. PATH : This variable contains a colon (:)-separated list of directories in which your system looks for executable files. The shell looks for the command in 
different directories mentioned in the $PATH variable. If the command is found, it executes. Otherwise, it returns with an error 'command not found'.
# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
( USER	The username, HOME	Default path to the user's home directory, EDITOR	Path to the program which edits the content of files, UID	User's unique ID,
TERM	Default terminal emulator, SHELL	Shell being used by the user )
Create a New Variable: $ VARIABLE_NAME= variable_value
Deleting Variables: $ unset "variablename"
To set value of an environment variable: $ export Variable=value

