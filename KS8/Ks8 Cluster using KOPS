Setup Kubernetes (K8s) Cluster on AWS

Create Ubuntu EC2 instance and set-up pre-requites:
1. AWS CLI
2. KOPS Client
3. KUBECTL Client
4. IAM Access to craete Cluster (Either Create a User with permission or allocate Role to EC2 Instance)
5. Create  Hosted Zone ( Public/Private) in R53
6. Create an S3 Bucket to store Cluster config and provision
7. Export AWS Crentials, S3 and AWS Region
8. Create Cluster
9. Explore Advance Features
10. Clean-up

1. AWS Configure:
# Verify the profile availability 
$ echo $AWS_PROFILE ( It will show the default profile and if no/blank ouput then see the aws credentials section)
$ cat ~/.aws/credentials ( It will show the available cedentials and if its blank then we need to generate a profile using aws configure setup)
$ aws configure (Setup the profile as this is needed in Step 4 fro IAM User/Role creation)
Note: Install AWSC CLI if not available.
(curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
apt install unzip python
unzip awscli-bundle.zip
#sudo apt-get install unzip - if you dont have unzip in your system
./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws)
 
2. Install kops on ubuntu instance:
curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops

3. Install kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectlCreate an IAM user/role with Route53, EC2, IAM and S3 full access

4. IAM Access 
(In order to build clusters within AWS we'll create a dedicated IAM user for kops. This user requires API credentials in order to use kops. Create the user, 
and credentials, using the AWS console)
# In this example we will create a User e.g. kops and then create a group e.g. "kops" which will have required permissions and then add User to this Group. 
# IAM Role Permission required:
AmazonEC2FullAccess
AmazonRoute53FullAccess
AmazonS3FullAccess
IAMFullAccess
AmazonVPCFullAccess

# Create Group "kops" with required permissions
$ aws iam create-group --group-name kops (Ity will create a GroupName: kops in jason template)
# Now provide this Group the required access:
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops











5. Create a Route53 private hosted zone (you can create Public hosted zone if you have a domain)

create an S3 bucket
aws s3 mb s3://dev.k8s.valaxy.in

Expose environment variable:
export KOPS_STATE_STORE=s3://dev.k8s.valaxy.in
Create sshkeys before creating cluster

ssh-keygen
Create kubernetes cluster definitions on S3 bucket

kops create cluster --cloud=aws --zones=ap-southeast-1b --name=dev.k8s.valaxy.in --dns-zone=valaxy.in --dns private
Create kubernetes cluser

kops update cluster dev.k8s.valaxy.in --yes
Validate your cluster

kops validate cluster
To list nodes

kubectl get nodes 
Deploying Nginx container on Kubernetes
Deploying Nginx Container

kubectl run sample-nginx --image=nginx --replicas=2 --port=80
kubectl get pods
kubectl get deployments
Expose the deployment as service. This will create an ELB in front of those 2 containers and allow us to publicly access them:

kubectl expose deployment sample-nginx --port=80 --type=LoadBalancer
kubectl get services -o wide
To delete cluster

kops delete cluster dev.k8s.valaxy.in --yes
