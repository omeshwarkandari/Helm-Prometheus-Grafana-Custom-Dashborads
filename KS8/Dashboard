Kubernetes UI Dashboard
(we will create a new user using Service Account mechanism of Kubernetes, grant this user admin permissions and login to Dashboard using bearer token tied to this user)
Note: In most cases after provisioning cluster using kops, kubeadm or any other popular tool, the ClusterRole cluster-admin already exists in the cluster so we will use this 
user, however, in the production envionment granting admin privileges to Dashboard's Service Account might be a security risk. 
In practice we need to create a role first and grant required privileges manually.)

Step 1: Deploy the Dashboard Service by creating pods:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
$ kubectl get pods --all-namespaces
NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE
kube-system            calico-kube-controllers-76bf499b46-65fs2     1/1     Running   2          25h
kube-system            calico-node-hxdzn                            1/1     Running   2          25h
kube-system            calico-node-wz7px                            1/1     Running   2          25h
kube-system            coredns-558bd4d5db-m6lxb                     1/1     Running   2          26h
kube-system            coredns-558bd4d5db-sfpt5                     1/1     Running   2          26h
kube-system            etcd-master-node                             1/1     Running   2          26h
kube-system            kube-apiserver-master-node                   1/1     Running   2          26h
kube-system            kube-controller-manager-master-node          1/1     Running   2          26h
kube-system            kube-proxy-vn79t                             1/1     Running   2          26h
kube-system            kube-proxy-wx8xq                             1/1     Running   2          25h
kube-system            kube-scheduler-master-node                   1/1     Running   2          26h
kubernetes-dashboard   dashboard-metrics-scraper-856586f554-vm8cg   1/1     Running   2          25h
kubernetes-dashboard   kubernetes-dashboard-78c79f97b4-qtfbd        1/1     Running   2          25h


Step 2: Providing access to a user "admin-user" to access Dashboard by Creating a Service Account and Creating a ClusterRoleBinding

# Creating a Service Account with name admin-user in namespace kubernetes-dashboard
" cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
EOF "

# Creating a ClusterRoleBinding:
" cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard
EOF "

# Lets combine both the functions in a YAML File " dashboard-admin.yaml" by creating a directory for Dashboard to host this file.
$ mkdir ~/dashboard && cd ~/dashboard
$ nano dashboard-admin.yaml or vi dashboard-admin.yaml
" apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard "
  
 $ kubectl apply -f dashboard-admin.yaml
 (Since there was some problem in Dashboard geneartion so below steps are useful by recreating clusterrolebinding)
 $ kubectl delete clusterrolebinding kubernetes-dashboard
 $ kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard --user=clusterUser
 
 
Step 3: Generate Token and access it over URL "http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
(We need to create a SSH Tunnel between the localhost/Laptop or Desktop to access the Cluster. The SSH Tunnel is created by adding " -L localhost:8001:127.0.0.1:8001 "
parameters in the normal ssh connect script e.g. we connect to a Kubeadm Cluster Master Node with "ssh -i "demokeypair.pem" centos@ec2-44-192-44-108.compute-1.amazonaws.com" 
so adding above script will create a SSH Tunnel and once connected we need to run "kubectl proxy" which will create a proxy nettwork between Cluster and local system)

# Use-case 1. Cluster creation from Local Laptop:
Create Tunnel:
omesh@DESKTOP-0MQTKM3:~$ ssh -i "kubernetes.simple.hello.com-5f:5a:5a:cb:01:70:0f:d3:89:32:8a:4b:fb:e2:00:f8.pem" -L localhost:8001:127.0.0.1:8001 ubuntu@ec2-54-146-178-90.compute-1.amazonaws.com
(We are connected to Cluster and run Kubectl Proxy. Here ubuntu@ip-172-20-40-166 is basically ubuntu@api.simple.hello.com)
ubuntu@ip-172-20-40-166:~$ kubectl proxy
Starting to serve on 127.0.0.1:8001

Create Token and use this token on URL to connect to the clsuter:
$ kubectl get secret -n kubernetes-dashboard $(kubectl get serviceaccount admin-user -n kubernetes-dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode

# Use-case 2. Cluster creation from EC2 Instance:
omesh@DESKTOP-0MQTKM3:~$ ssh -i "demokeypair.pem" -L localhost:8001:127.0.0.1:8001 centos@ec2-44-192-44-108.compute-1.amazonaws.com
Last login: Thu May  6 10:18:05 2021 from 49.37.161.197
[centos@master-node ~]$ sudo su - kubeadmin
Last login: Thu May  6 10:18:07 UTC 2021 on pts/0
[kubeadmin@master-node ~]$ kubectl proxy
Starting to serve on 127.0.0.1:8001

# Generate Token and connect:
$ cd dashboard
$ kubectl get secret -n kubernetes-dashboard $(kubectl get serviceaccount admin-user -n kubernetes-dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode





  
  
