What is Kubeadm ?
Kubeadm is a tool built to provide best-practice "fast paths" for creating Kubernetes clusters. It performs the actions necessary to get a minimum viable, 
secure cluster up and running in a user friendly way. Kubeadm's scope is limited to the local node filesystem and the Kubernetes API, and it is intended to be a 
composable building block of higher level tools.

Common Kubeadm cmdlets
kubeadm init to bootstrap the initial Kubernetes control-plane node.
kubeadm join to bootstrap a Kubernetes worker node or an additional control plane node, and join it to the cluster.
kubeadm upgrade to upgrade a Kubernetes cluster to a newer version.
kubeadm reset to revert any changes made to this host by kubeadm init or kubeadm join.

Follow this documentation to set up a Kubernetes cluster on CentOS 7 machines.

This documentation guides you in setting up a cluster with one master node and two worker nodes.

Prerequisites:
System Requirements

Master: t2.medium (2 CPUs and 2GB Memory)
Worker Nodes: t2.micro

Open Below ports in the Security Group.

Master node:
6443 32750 10250 4443 443 8080

On Master node and Worker node:
179

On Master and Worker:
Perform all the commands as root user unless otherwise specified

#Install, Enable and start docker service. Use the Docker repository to install docker.
#If you use docker from CentOS OS repository, the docker version might be old to work with Kubernetes v1.13.0 and above
yum install -y -q yum-utils device-mapper-persistent-data lvm2 > /dev/null 2>&1
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo > /dev/null 2>&1
yum install -y -q docker-ce >/dev/null 2>&1

#Start Docker services
systemctl enable docker
systemctl start docker

#Disable SELinux:
#Security-Enhanced Linux (SELinux) is a Linux kernel security module that provides a mechanism for supporting access control security policies, including mandatory access controls (MAC).
# Set SELinux in permissive mode (effectively disabling it) and by Disabling the SElinux all containers can easily access host filesystem
setenforce 0
sed -i --follow-symlinks 's/^SELINUX=enforcing/SELINUX=disabled/' /etc/sysconfig/selinux
Disable Firewall

#Disable FIrewall if any
systemctl disable firewalld
systemctl stop firewalld

# Disable swap (To ensure pods are deployed in healthy node rather than nodes maanging its resources to accomodate a pod)
sed -i '/swap/d' /etc/fstab
swapoff -a

Configuring a bridge network:
A Bridge Container Network Interface (CNI) plug-in enables all the Pods on a node to connect through virtual switch by assigning each pod an IP address on the additional network.
#Update sysctl settings for Kubernetes networking
cat >> /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

#Kubernetes Setup
# Add yum repository for kubernetes packages because we are using Installtion option " Without Package Manager"

cat >>/etc/yum.repos.d/kubernetes.repo<<EOF
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
or 
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

#Install Kubernetes
yum install -y kubeadm-1.15.6-0.x86_64 kubelet-1.15.6-0.x86_64 kubectl-1.15.6-0.x86_64
Enable and Start kubelet service
systemctl enable kubelet
systemctl start kubelet

On Master Node:
Initialize Kubernetes Cluster

kubeadm init --apiserver-advertise-address=<MasterServerIP> --pod-network-cidr=192.168.0.0/16
Create a user for kubernetes administration and copy kube config file.
To be able to use kubectl command to connect and interact with the cluster, the user needs kube config file.
In this case, we are creating a user called kubeadmin

useradd kubeadmin 
mkdir /home/kubeadmin/.kube
cp /etc/kubernetes/admin.conf /home/kubeadmin/.kube/config
chown -R kubeadmin:kubeadmin /home/kubeadmin/.kube
Deploy Calico network as a kubeadmin user.

This should be executed as a user (heare as a kubeadmin )

sudo su - kubeadmin 
kubectl create -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml
Cluster join command

kubeadm token create --print-join-command
On Worker Node:
Add worker nodes to cluster

Use the output from kubeadm token create command in previous step from the master server and run here.

Verifying the cluster To Get Nodes status

kubectl get nodes
To Get component status

kubectl get cs
