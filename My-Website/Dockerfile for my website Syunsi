Create an Image and Push to my docker hub omeshwar/omjyokan
Create a Dockerfile for my webpage for Syunsi
# Create a Dockerfile to pull an ubuntu latest image and create a base image.

FROM ubuntu:latest
ENV DEBIAN_FRONTEND=noninteractive 
RUN apt-get update && apt-get install apache2 -y && apt-get install apache2-utils -y && apt-get install curl && apt-get clean && rm -rf /var/lib/apt/lists/*
EXPOSE 80
WORKDIR /var/www/html/
Copy index.html  index.html
ADD database/StyleSheet.css database/homepic.jpg database/logo.JPG database/syunsi.mp4 database/form.html database/Style.css /var/www/html/
HEALTHCHECK CMD curl --fail http://localhost:80/ || exit 1
CMD ["apachectl", "-D", "FOREGROUND"]

Explanation of Bash Control Operators: &&, CMD and || commands:
"  Command && menas execute the statement which follows only if the preceding statement executed successfully (returned exit code zero).
CMD [ ] command will pick the configuration from default configuration directories. If we run CMD ["apachectl", "FOREGROUND"] and after creating image if we create a container
then it will exit because Container is just a process which actually run so to keep the Container/Process running we need to add "-D" swicth to ensure apache parent will run
in the foreground and not detach from the shell. "apachectl" is to start the stopped apache services.
Also, when you run  apache/httpd server on Docker, using “docker exec” or  “docker cmd” , it is necessary to start httpd/apache in 
foreground.
If you run it as daemon  Docker will exit thinking the job has finished.
Update the Image with StyleSheet.css, home.jpg, logo.jpg, form.html, Style.css for form and video by using ADD to create a webpage. 
Healthcheck: curl command makes a HTTP request inside the container, which checks that the web app in the container does respond. Now, http://localhost || exit 1 means if 
http://localhost succeeds i.e. exit code 0 or Docker Healthy else exit code 1 which means the Docker the container is unhealthy so exit the process.
e.g. cmd1 || cmd2 What happens is that if cmd1 succeeds (i.e. exit code 0), then cmd2 will NOT be performed. cmd2 will only be performed if cmd1 fails. "

# Build the docker image 
$ docker build -t webserver .  # Create a Custom Ubuntu Image from Ubuntu

# Build the image docker container 
$ docker run -dit -p 8080:80 webserver # Craete a docker conatiner with health check and access apache at localhost:8080
$ docker run --rm -dit -p 8080:80 webserver # --rm will ensure that container is removed on stop so no need for "docker rm" after "docker stop"

# Log into the container
$ docker exec -it <container name> /bin/bash  (Exec into conatiner will route us to WORKDIR /var/www/htm)
root@d7f2f1516be7:/var/www/html#
root@d7f2f1516be7:/var/www/html# ls  (ls will dispaly our source files)
Style.css  StyleSheet.css  form.html  homepic.jpg  index.html  logo.JPG  syunsi.mp4

# Open the application/webpage on the browser and verify that page opens exactly the way intended.
http://localhost:8080 

#Push the Image to the Docker Hub
#Logout from the Docker Hub 
# Login to Docker Hub omeshwar whiuch will ask for password
docker login -u omeshwar 
# Create a tag for image webserver:latest in our repo REPONAME:tag
docker tag webserver:latest omeshwar/omjyokan:webserver-v1
docker push omeshwar/omjyokan:webserver-v1


Simple Dockerfile:

FROM ubuntu:latest
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y apache2
CMD ["apachectl", "-D", "FOREGROUND"]

( We can add ENTRYPOINT and ENTRYPOINT always specifies the executable as its first argument e.g. apchectl
FROM ubuntu:latest
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get install -y apache2
CMD ["-D", "FOREGROUND"]
ENTRYPOINT ["apachectl"]

& To test with -D swicth:

FROM ubuntu:latest
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get install -y apache2
CMD ["apachectl", "FOREGROUND"]
